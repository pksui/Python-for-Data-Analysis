[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis for Python",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "聚合数据与分组操作.html",
    "href": "聚合数据与分组操作.html",
    "title": "3  聚合数据与分组操作",
    "section": "",
    "text": "3.1 什么是数据分组操作？\nHadley Wickham是R语言很多著名模块的创造者，他认为数据分组操作就是对数据进行分离或者结合。我们很容易想到的分离操作是通过DataFrame的行或列索引进行分离，比如说男生和女生的列分开。然后，我们可以分别计算男女两组数据的平均值，把两组得出来的平均值合并到一起作为结果生成一个新的对象。下图就是一个分组操作的实例展示：\n首先，我们来看一个列表形式的数据以DataFrame的形式展现出来：\ndf = pd.DataFrame({\"key1\" : [\"a\", \"a\", None, \"b\", \"b\", \"a\", None],\n                       \"key2\" : pd.Series([1, 2, 1, 2, 1, None, 1],                      \n                                          dtype=\"Int64\"),\n                       \"data1\" : np.random.standard_normal(7),\n                       \"data2\" : np.random.standard_normal(7)})\ndf\n\n\n\n\n\n\n\n\n\nkey1\nkey2\ndata1\ndata2\n\n\n\n\n0\na\n1\n-1.127976\n-0.317759\n\n\n1\na\n2\n-1.125100\n-0.403665\n\n\n2\nNone\n1\n0.296107\n-1.592856\n\n\n3\nb\n2\n0.026732\n-1.087704\n\n\n4\nb\n1\n0.660079\n1.096754\n\n\n5\na\n&lt;NA&gt;\n-1.132287\n-0.428510\n\n\n6\nNone\n1\n-1.562927\n-0.259266\n很显然，这个数据，前两列是关键字，后两列是数据。假设你想计算以key1为索引的data1这列数据的平均值，就可以用data1列去调用groupby功能，把key1列作为参数写进去：\ngrouped = df[\"data1\"].groupby(df['key1'])\ngrouped\n\n&lt;pandas.core.groupby.generic.SeriesGroupBy object at 0x7c201d6ba6b0&gt;\n调用groupby得出来的结果是一个object，调用的时候，我们没有进行平均值的计算，但是这个object里面有我们接下来要进行操作的信息。接下来，我们调用Groupby里面的mean方法就可以得出结果了：\ngrouped.mean()\n\nkey1\na   -1.128454\nb    0.343405\nName: data1, dtype: float64\n我们在上面处理的数据是以key1为索引的data1：\nexample = df[['key1','data1']]\nexample\n\n\n\n\n\n\n\n\n\nkey1\ndata1\n\n\n\n\n0\na\n-1.127976\n\n\n1\na\n-1.125100\n\n\n2\nNone\n0.296107\n\n\n3\nb\n0.026732\n\n\n4\nb\n0.660079\n\n\n5\na\n-1.132287\n\n\n6\nNone\n-1.562927\ndata1数据分成三类：a，b和None，这里的平均值计算是分别计算了a与b种类的平均值，没有把None算上。生成的结果是一个Series，其中列名是之前DataFrame中的索引列名key1。\n我们不仅可以以DataFrame其中一列作为索引，还可以让多列作为索引，比如让key1和key2同时作为索引：\nmeans = df[\"data1\"].groupby([df['key1'], df['key2']]).mean()\nmeans\n\nkey1  key2\na     1      -1.127976\n      2      -1.125100\nb     1       0.660079\n      2       0.026732\nName: data1, dtype: float64\n可以看到，这其中出现了四个数据点，也就是相对于之前的数据，这增长了两倍，它的逻辑是什么呢？如下图表所示：\n让两列作为我们groupby的索引，就是先以key1为索引分成a,b两类，以此为基础通过key2把数据再分为1,2两类，那么一共就是四类了。 当然，上面的列表是我用markdown语言自己描述的，你也可以通过Pandas的unstack方法将结果直接用DataFrame方式描述出来：\nmeans.unstack()\n\n\n\n\n\n\n\n\nkey2\n1\n2\n\n\nkey1\n\n\n\n\n\n\na\n-1.127976\n-1.125100\n\n\nb\n0.660079\n0.026732\n注意，上面我们传给groupby作为索引的是DataFrame的两个列。其实也可以将适当长度数组（array）作为索引：\nstates = np.array([\"OH\", \"CA\", \"CA\", \"OH\", \"OH\", \"CA\", \"OH\"])\nyears = [2005, 2005, 2006, 2005, 2006, 2005, 2006]\ndf[\"data1\"].groupby([states, years]).mean()\n\nCA  2005   -1.128694\n    2006    0.296107\nOH  2005   -0.550622\n    2006   -0.451424\nName: data1, dtype: float64\ndata1这列数据被states和years分为四组，但是很显然每组的数据个数不一样，计算每组的平均值之后，把结果展示出来，转换成DataFrame形式如下所示：\ntr = df[\"data1\"].groupby([states, years]).mean()\ntr.unstack()\n\n\n\n\n\n\n\n\n\n2005\n2006\n\n\n\n\nCA\n-1.128694\n0.296107\n\n\nOH\n-0.550622\n-0.451424\n这里值得注意的是通过DataFrame本身的列进行索引最后的结果显示列名和行名，通过array来进行索引不会有名称，因为我们只是把数组的内容传进去，并没有把数组的名称穿进去。\n我们也可以直接通过DataFrame来去进行分组操作，不用像上面那样把想处理的数据直接拿出来：\ndf.groupby(\"key1\").mean()\n\n\n\n\n\n\n\n\n\nkey2\ndata1\ndata2\n\n\nkey1\n\n\n\n\n\n\n\na\n1.5\n-1.128454\n-0.383311\n\n\nb\n1.5\n0.343405\n0.004525\n在这个情况中，我们可以发现以key1作为索引时，把其余的列都作为了分组的目标。\ndf.groupby(\"key2\").mean(numeric_only=True)\n\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\nkey2\n\n\n\n\n\n\n1\n-0.433679\n-0.268282\n\n\n2\n-0.549184\n-0.745684\n当以key2列作为索引时，我们发现多了numeric_only=True,这是因为key1列都是字母，没有办法进行平均值取值，我们只让都是数字或者None的列进行分组操作。\ndf.groupby(['key1', 'key2']).mean()\n\n\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\nkey1\nkey2\n\n\n\n\n\n\na\n1\n-1.127976\n-0.317759\n\n\n2\n-1.125100\n-0.403665\n\n\nb\n1\n0.660079\n1.096754\n\n\n2\n0.026732\n-1.087704\n也可以直接在DataFrame上进行多重列索引。\n很多时候，我们不仅关心每组的具体特征，我们也关注每组数据的具体数量，通过GroupBy中的size方法就可以看到结果：\ndf.groupby(['key1', 'key2']).size()\n\nkey1  key2\na     1       1\n      2       1\nb     1       1\n      2       1\ndtype: int64\n这个结果看起来有歧义，我们把他变成DataFrame的形式，比较明了：\nex2 = df.groupby(['key1', 'key2']).size()\nex2.unstack()\n\n\n\n\n\n\n\n\nkey2\n1\n2\n\n\nkey1\n\n\n\n\n\n\na\n1\n1\n\n\nb\n1\n1\n额，可以看出这个数据分组的很平均，每组都只有一个数据。当我们通过GroupBy的size方法去查看数据分组后的数据数量时，一般忽视掉None的情况，也就是如果索引列有None列，我们是不计算那个None组有多少数据点的，但是也可以通过dropna=False的参数描述进行取消这个默认情况：\ndf.groupby('key1', dropna=False).size()\n\nkey1\na      3\nb      2\nNaN    2\ndtype: int64\n看一个更复杂的情况，我们知道无论是key1还是key2列都有None值，我们以这两列作为索引列去分组，看看每组的数据个数：\ndf.groupby(['key1', 'key2'], dropna=False).size()\n\nkey1  key2\na     1       1\n      2       1\n      &lt;NA&gt;    1\nb     1       1\n      2       1\nNaN   1       2\ndtype: int64\n可以看到missing的数值还不少，有三个。还有一个方法也可以查看分组后的情况，那就是count，但它只是查看非缺失值的数量：\ndf.groupby(\"key1\").count()\n\n\n\n\n\n\n\n\n\nkey2\ndata1\ndata2\n\n\nkey1\n\n\n\n\n\n\n\na\n2\n3\n3\n\n\nb\n2\n2\n2\n这可以很容易看出来，归属于a组的key2列有一个损失值。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>聚合数据与分组操作</span>"
    ]
  },
  {
    "objectID": "聚合数据与分组操作.html#什么是数据分组操作",
    "href": "聚合数据与分组操作.html#什么是数据分组操作",
    "title": "3  聚合数据与分组操作",
    "section": "",
    "text": "图 1: 分组实例\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nkey1/key2\n1\n2\n\n\n\n\na\na1\na2\n\n\nb\nb1\nb2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.1.1 遍历组中数据\ngroupby生成的object可以遍历，每次遍历会返回小组的名称和数据，如下所示：\n\nfor name, group in df.groupby(\"key1\"):\n  print(name)\n  print(group)\n\na\n  key1  key2     data1     data2\n0    a     1 -1.127976 -0.317759\n1    a     2 -1.125100 -0.403665\n5    a  &lt;NA&gt; -1.132287 -0.428510\nb\n  key1  key2     data1     data2\n3    b     2  0.026732 -1.087704\n4    b     1  0.660079  1.096754\n\n\n当数据中被分组操作时，如果有不止一个索引列，那么，groupby之后，会返回一个tuple（里面有多个参数，整体代表数据特定的分类），和对应特定分类的数据：\n\nfor (k1, k2), group in df.groupby([\"key1\", \"key2\"]):\n  print((k1, k2))\n  print(group)\n\n('a', 1)\n  key1  key2     data1     data2\n0    a     1 -1.127976 -0.317759\n('a', 2)\n  key1  key2   data1     data2\n1    a     2 -1.1251 -0.403665\n('b', 1)\n  key1  key2     data1     data2\n4    b     1  0.660079  1.096754\n('b', 2)\n  key1  key2     data1     data2\n3    b     2  0.026732 -1.087704\n\n\n当对分组生成的objct遍历完成之后，我们希望有一个数据结构可以把每次遍历的数据都放入进去，那么这个数据结构最好是字典，如下所示，一旦有一个字典后，我们就可以按我们的想法随时调取想要查看的数据：\n\npieces = {name: group for name, group in df.groupby(\"key1\")}\npieces[\"b\"]\n\n\n\n\n\n\n\n\n\nkey1\nkey2\ndata1\ndata2\n\n\n\n\n3\nb\n2\n0.026732\n-1.087704\n\n\n4\nb\n1\n0.660079\n1.096754\n\n\n\n\n\n\n\n\n我们还可以根据列名提取几列来进行分组，下面这个例子是通过把key1，key2设置成key， data1，data2设置成data，这就成了两组，再把两组数据展现出来，但是这个方式我觉得不如直接通过前几章讲得方式（直接在DataFrame数据结构上进行columns的合并或者分开）\n\ngrouped = df.groupby({\"key1\": \"key\", \"key2\": \"key\",\n                     \"data1\": \"data\", \"data2\": \"data\"}, axis=\"columns\")\nfor group_key, group_values in grouped:\n  print(group_key)\n  print(group_values)\n\ndata\n      data1     data2\n0 -1.127976 -0.317759\n1 -1.125100 -0.403665\n2  0.296107 -1.592856\n3  0.026732 -1.087704\n4  0.660079  1.096754\n5 -1.132287 -0.428510\n6 -1.562927 -0.259266\nkey\n   key1  key2\n0     a     1\n1     a     2\n2  None     1\n3     b     2\n4     b     1\n5     a  &lt;NA&gt;\n6  None     1\n\n\n/tmp/ipykernel_12462/387434837.py:1: FutureWarning:\n\nDataFrame.groupby with axis=1 is deprecated. Do `frame.T.groupby(...)` without axis instead.\n\n\n\n\n\n3.1.2 选择一列或者特定的很多列\n像用DataFrame形式储存的数据，可能有很多列，有很多索引列，但是我们只想选择我们care的数据，这时可以用groupy方法后，在后面加上一个方括号输入你关心的数据列。\n\ndf.groupby(\"key1\")[\"data1\"]\ndf.groupby(\"key2\")[[\"data2\"]]\n#还可以用下面这种方式来展现\ndf[\"data1\"].groupby(df[\"key1\"])\ndf[[\"data2\"]].groupby(df[\"key1\"]) \n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7c201d6a2d40&gt;\n\n\n\n\n\n\n\n\nTip\n\n\n\n如果你想用groupby去调用两列及以上的数据列，要用[[‘a’,‘b’,‘c’]]这种方式把要索引的数据放在groupby的括号后面，因为无论是一个数据还是多个数据括号里的内容必须只能为一个，所以要么是一个字符串，要么就是一个列表（list）。\n\n\n分组操作之后，我们可以继续进行数值计算的操作，比如说进行平均值计算:\n\ndf.groupby([\"key1\", \"key2\"])[[\"data2\"]].mean()\n\n\n\n\n\n\n\n\n\n\ndata2\n\n\nkey1\nkey2\n\n\n\n\n\na\n1\n-0.317759\n\n\n2\n-0.403665\n\n\nb\n1\n1.096754\n\n\n2\n-1.087704\n\n\n\n\n\n\n\n\n这里有一个有意思的现象，如果你传给groupby的是一个字符串，它最后得出的结果是一个Series,因为pandas认为这只是一个数据列，只不过给它两个索引。但是如果你传给它一个list，哪怕list里面只有一个字符串，pandas会认为这有很多个数据列，应该生成一个DataFrame。\n\ns_grouped = df.groupby([\"key1\", \"key2\"])[\"data2\"]\ns_grouped\n\n&lt;pandas.core.groupby.generic.SeriesGroupBy object at 0x7c201d6a2da0&gt;\n\n\n\ns_grouped.mean()\n\nkey1  key2\na     1      -0.317759\n      2      -0.403665\nb     1       1.096754\n      2      -1.087704\nName: data2, dtype: float64\n\n\n\n\n3.1.3 通过字典和序列进行分组操作",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>聚合数据与分组操作</span>"
    ]
  },
  {
    "objectID": "聚合数据与分组操作.html#遍历组中数据",
    "href": "聚合数据与分组操作.html#遍历组中数据",
    "title": "3  聚合数据与分组操作",
    "section": "3.2 遍历组中数据",
    "text": "3.2 遍历组中数据\ngroupby生成的object可以遍历，每次遍历会返回小组的名称和数据，如下所示：\n\nfor name, group in df.groupby(\"key1\"):\n  print(name)\n  print(group)\n\na\n  key1  key2     data1     data2\n0    a     1  0.328987  0.287411\n1    a     2  1.197005 -0.571804\n5    a  &lt;NA&gt; -0.569017  0.355810\nb\n  key1  key2     data1     data2\n3    b     2  0.961955 -0.344632\n4    b     1 -0.681114 -0.470737\n\n\n当数据中被分组操作时，如果有不止一个索引列，那么，groupby之后，会返回一个tuple（里面有多个参数，整体代表数据特定的分类），和对应特定分类的数据：\n\nfor (k1, k2), group in df.groupby([\"key1\", \"key2\"]):\n  print((k1, k2))\n  print(group)\n\n('a', 1)\n  key1  key2     data1     data2\n0    a     1  0.328987  0.287411\n('a', 2)\n  key1  key2     data1     data2\n1    a     2  1.197005 -0.571804\n('b', 1)\n  key1  key2     data1     data2\n4    b     1 -0.681114 -0.470737\n('b', 2)\n  key1  key2     data1     data2\n3    b     2  0.961955 -0.344632\n\n\n当对分组生成的objct遍历完成之后，我们希望有一个数据结构可以把每次遍历的数据都放入进去，那么这个数据结构最好是字典，如下所示，一旦有一个字典后，我们就可以按我们的想法随时调取想要查看的数据：\n\npieces = {name: group for name, group in df.groupby(\"key1\")}\npieces[\"b\"]\n\n\n\n\n\n\n\n\n\nkey1\nkey2\ndata1\ndata2\n\n\n\n\n3\nb\n2\n0.961955\n-0.344632\n\n\n4\nb\n1\n-0.681114\n-0.470737\n\n\n\n\n\n\n\n\n我们还可以根据列名提取几列来进行分组，下面这个例子是通过把key1，key2设置成key， data1，data2设置成data，这就成了两组，再把两组数据展现出来，但是这个方式我觉得不如直接通过前几章讲得方式（直接在DataFrame数据结构上进行columns的合并或者分开）\n\ngrouped = df.groupby({\"key1\": \"key\", \"key2\": \"key\",\n                     \"data1\": \"data\", \"data2\": \"data\"}, axis=\"columns\")\n\n/tmp/ipykernel_21053/2563747980.py:1: FutureWarning:\n\nDataFrame.groupby with axis=1 is deprecated. Do `frame.T.groupby(...)` without axis instead.\n\n\n\n\nfor group_key, group_values in grouped:\n  print(group_key)\n  print(group_values)\n\ndata\n      data1     data2\n0  0.328987  0.287411\n1  1.197005 -0.571804\n2  1.239926 -1.001263\n3  0.961955 -0.344632\n4 -0.681114 -0.470737\n5 -0.569017  0.355810\n6  0.136756  1.316718\nkey\n   key1  key2\n0     a     1\n1     a     2\n2  None     1\n3     b     2\n4     b     1\n5     a  &lt;NA&gt;\n6  None     1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>聚合数据与分组操作</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "聚合数据与分组操作.html#选择一列或者特定的很多列",
    "href": "聚合数据与分组操作.html#选择一列或者特定的很多列",
    "title": "3  聚合数据与分组操作",
    "section": "3.3 选择一列或者特定的很多列",
    "text": "3.3 选择一列或者特定的很多列",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>聚合数据与分组操作</span>"
    ]
  }
]